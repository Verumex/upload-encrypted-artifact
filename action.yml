name: 'Upload an encrypted Build Artifact'
description: 'Upload an encrypted build artifact that can be used by subsequent workflow steps'
author: 'Verumex'
inputs:
  gpg_key:
    description: A single or list of public GPG keys to use
    required: true
  name:
    description: 'Artifact name'
    default: 'artifact'
  path:
    description: 'A file, directory or wildcard pattern that describes what to upload'
    required: true
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.

      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: 'warn'
  retention-days:
    description: >
      Duration after which artifact will expire in days. 0 means using default retention.

      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.
  compression-level:
    description: >
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9:
      - 0: No compression
      - 1: Best speed
      - 6: Default compression (same as GNU Gzip)
      - 9: Best compression
      Higher levels will result in better compression, but will take longer to complete.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    default: '6'
  overwrite:
    description: >
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
    default: 'false'
  include-hidden-files:
    description: >
      If true, hidden files will be included in the artifact.
      If false, hidden files will be excluded from the artifact.
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Import GPG keys
      shell: bash
      run: |
        echo "${{ inputs.gpg_key }}" | awk 'BEGIN { RS = "-----END PGP PUBLIC KEY BLOCK-----" } { print $0 "-----END PGP PUBLIC KEY BLOCK-----" }' | gpg --batch --import

    - name: Encrypt artifacts
      id: encrypt
      shell: bash
      run: |

        set -e

        # From inputs
        artifact_name="${{ inputs.name }}"
        paths="${{ inputs.path }}"

        # Create a temporary directory to hold files for the archive
        archive_path="${{ runner.temp }}/${artifact_name}.tar"

        # Log the inputs
        echo "Creating an archive from the following paths:"
        echo "$paths"

        # Prepare include and exclude options for tar
        include_paths=""
        exclude_paths=""

        # Read each line of the multiline path input
        while read -r path; do
          if [[ $path == \!* ]]; then
            # Exclude paths starting with "!"
            exclude_paths+=" --exclude=${path:1}"
          else
            # Include paths
            include_paths+=" $path"
          fi
        done <<< "$paths"

        # Prepare the --recipient options for each key
        recipients=""
        for recipient in $(gpg --with-colons --list-keys | grep pub | cut -d':' -f5); do
          recipients+=" --recipient $recipient"
        done

        # Create the archive using tar, applying exclusions
        tar -cvf "$archive_path" $exclude_paths $include_paths

        # Encrypt the archive with GPG
        encrypted_archive_path="${archive_path}.gpg"
        gpg --batch --yes --trust-model always --encrypt $recipients --output "$encrypted_archive_path" "$archive_path"

        # Remove unencrypted archive to clean up
        rm "$archive_path"

        # Upload the encrypted archive using `actions/upload-artifact`
        echo "Uploading encrypted archive as artifact: $artifact_name"
        echo "archive-path=${encrypted_archive_path}" >> "$GITHUB_OUTPUT"

    # Upload the encrypted archive using actions/upload-artifact
    - name: Upload Encrypted Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ steps.encrypt.outputs.archive-path }}  # Path to the encrypted archive
        retention-days: ${{ inputs.retention-days }}
        if-no-files-found: ${{ inputs.if-no-files-found }}
        compression-level: ${{ inputs.compression-level }}
        overwrite: ${{ inputs.overwrite }}
        include-hidden-files: ${{ inputs.include-hidden-files }}
